import numpy as np
def gauss_jordan_inverse(matrix):
    n = len(matrix)
    augmented_matrix = np.hstack((matrix, np.eye(n)))
    for i in range(n):
        if augmented_matrix[i, i] == 0:
            for j in range(i + 1, n):
                if augmented_matrix[j, i] != 0:
                    augmented_matrix[[i, j]] = augmented_matrix[[j, i]]
                    break
        augmented_matrix[i] = augmented_matrix[i] / augmented_matrix[i, i]
        for j in range(n):
            if j != i:
                augmented_matrix[j]-=augmented_matrix[i]*augmented_matrix[j, i]
    inverse_matrix=augmented_matrix[:, n:]
    return inverse_matrix
matrix = np.array([
    [3, 10, 4],
    [6, 7, 12],
    [8, 9, 5]
])
inverse_matrix = gauss_jordan_inverse(matrix)
print("Original Matrix:")
print(matrix)
print("\nInverse Matrix:")
print(inverse_matrix)
